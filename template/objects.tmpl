{{ define "simple_objects" }}
{{- range $o := $ }}
	{{- template "simple_object" $o }}
{{- end }}
{{- end }}

{{ define "simple_object" }}
	{{ $.Name }} = {{ $.PackageAlias }}.{{ $.Name }}
{{- end }}

{{ define "constants" }}
const (
	{{- template "simple_objects" $.Constants }}
)
{{- end }}

{{ define "variables" }}
var (
	{{- template "simple_objects" $.Variables }}
)
{{- end }}

{{ define "functions" }}
{{ if $.AssignFunctions }}
// Functions
var (
	{{- template "simple_objects" $.Functions }}
)
{{ else }}
{{ range $fn := $.Functions }}
func {{ $fn.Name }} {{ $fn.WriteSignature }} {
	{{ if $fn.Returns }} return {{ end }}{{ $fn.PackageAlias }}.{{ $fn.Name }}{{ if $fn.Generic }}[{{- template "type_param_names" $fn.TypeParams }}]{{- end }}({{ $fn.CallArgs }})
}
{{ end }}
{{- end }}
{{- end }}

{{ define "types" }}
type (
{{- range $t := $.Types }}
	{{- if $t.Generic }}
	{{ $t.Name }}[{{- template "type_params" $t.TypeParams }}] {{ $t.PackageAlias }}.{{ $t.Name }}[{{- template "type_param_names" $t.TypeParams }}]
	{{- else }}
	{{ $t.Name }} = {{ $t.TypeString }}
	{{- end }}
{{- end }}
)
{{- end }}

{{ define "type_params" }}
{{- range $tp := $ }}{{ $tp }} {{ $tp.Constraint }}, {{- end }}
{{- end }}

{{ define "type_param_names" }}
{{- range $tp := $ }}{{ $tp }}, {{- end }}
{{- end }}
