// Code generated by aliaser. DO NOT EDIT.

package gin

import (
	io "io"
	http "net/http"

	gin "github.com/gin-gonic/gin"
)

const (
	AuthUserKey             = gin.AuthUserKey
	BindKey                 = gin.BindKey
	BodyBytesKey            = gin.BodyBytesKey
	ContextKey              = gin.ContextKey
	DebugMode               = gin.DebugMode
	EnvGinMode              = gin.EnvGinMode
	ErrorTypeAny            = gin.ErrorTypeAny
	ErrorTypeBind           = gin.ErrorTypeBind
	ErrorTypeNu             = gin.ErrorTypeNu
	ErrorTypePrivate        = gin.ErrorTypePrivate
	ErrorTypePublic         = gin.ErrorTypePublic
	ErrorTypeRender         = gin.ErrorTypeRender
	MIMEHTML                = gin.MIMEHTML
	MIMEJSON                = gin.MIMEJSON
	MIMEMultipartPOSTForm   = gin.MIMEMultipartPOSTForm
	MIMEPOSTForm            = gin.MIMEPOSTForm
	MIMEPlain               = gin.MIMEPlain
	MIMETOML                = gin.MIMETOML
	MIMEXML                 = gin.MIMEXML
	MIMEXML2                = gin.MIMEXML2
	MIMEYAML                = gin.MIMEYAML
	PlatformCloudflare      = gin.PlatformCloudflare
	PlatformGoogleAppEngine = gin.PlatformGoogleAppEngine
	ReleaseMode             = gin.ReleaseMode
	TestMode                = gin.TestMode
	Version                 = gin.Version
)

var (
	DebugPrintRouteFunc = gin.DebugPrintRouteFunc
	DefaultErrorWriter  = gin.DefaultErrorWriter
	DefaultWriter       = gin.DefaultWriter
)

func BasicAuth(accounts gin.Accounts) gin.HandlerFunc {
	return gin.BasicAuth(accounts)
}

func BasicAuthForRealm(accounts gin.Accounts, realm string) gin.HandlerFunc {
	return gin.BasicAuthForRealm(accounts, realm)
}

func Bind(val any) gin.HandlerFunc {
	return gin.Bind(val)
}

func CreateTestContext(w http.ResponseWriter) (c *gin.Context, r *gin.Engine) {
	return gin.CreateTestContext(w)
}

func CreateTestContextOnly(w http.ResponseWriter, r *gin.Engine) (c *gin.Context) {
	return gin.CreateTestContextOnly(w, r)
}

func CustomRecovery(handle gin.RecoveryFunc) gin.HandlerFunc {
	return gin.CustomRecovery(handle)
}

func CustomRecoveryWithWriter(out io.Writer, handle gin.RecoveryFunc) gin.HandlerFunc {
	return gin.CustomRecoveryWithWriter(out, handle)
}

func Default() *gin.Engine {
	return gin.Default()
}

func Dir(root string, listDirectory bool) http.FileSystem {
	return gin.Dir(root, listDirectory)
}

func DisableBindValidation() {
	gin.DisableBindValidation()
}

func DisableConsoleColor() {
	gin.DisableConsoleColor()
}

func EnableJsonDecoderDisallowUnknownFields() {
	gin.EnableJsonDecoderDisallowUnknownFields()
}

func EnableJsonDecoderUseNumber() {
	gin.EnableJsonDecoderUseNumber()
}

func ErrorLogger() gin.HandlerFunc {
	return gin.ErrorLogger()
}

func ErrorLoggerT(typ gin.ErrorType) gin.HandlerFunc {
	return gin.ErrorLoggerT(typ)
}

func ForceConsoleColor() {
	gin.ForceConsoleColor()
}

func IsDebugging() bool {
	return gin.IsDebugging()
}

func Logger() gin.HandlerFunc {
	return gin.Logger()
}

func LoggerWithConfig(conf gin.LoggerConfig) gin.HandlerFunc {
	return gin.LoggerWithConfig(conf)
}

func LoggerWithFormatter(f gin.LogFormatter) gin.HandlerFunc {
	return gin.LoggerWithFormatter(f)
}

func LoggerWithWriter(out io.Writer, notlogged ...string) gin.HandlerFunc {
	return gin.LoggerWithWriter(out, notlogged...)
}

func Mode() string {
	return gin.Mode()
}

func New() *gin.Engine {
	return gin.New()
}

func Recovery() gin.HandlerFunc {
	return gin.Recovery()
}

func RecoveryWithWriter(out io.Writer, recovery ...gin.RecoveryFunc) gin.HandlerFunc {
	return gin.RecoveryWithWriter(out, recovery...)
}

func SetMode(value string) {
	gin.SetMode(value)
}

func WrapF(f http.HandlerFunc) gin.HandlerFunc {
	return gin.WrapF(f)
}

func WrapH(h http.Handler) gin.HandlerFunc {
	return gin.WrapH(h)
}

type (
	Accounts           = gin.Accounts
	Context            = gin.Context
	Engine             = gin.Engine
	Error              = gin.Error
	ErrorType          = gin.ErrorType
	H                  = gin.H
	HandlerFunc        = gin.HandlerFunc
	HandlersChain      = gin.HandlersChain
	IRouter            = gin.IRouter
	IRoutes            = gin.IRoutes
	LogFormatter       = gin.LogFormatter
	LogFormatterParams = gin.LogFormatterParams
	LoggerConfig       = gin.LoggerConfig
	Negotiate          = gin.Negotiate
	Param              = gin.Param
	Params             = gin.Params
	RecoveryFunc       = gin.RecoveryFunc
	ResponseWriter     = gin.ResponseWriter
	RouteInfo          = gin.RouteInfo
	RouterGroup        = gin.RouterGroup
	RoutesInfo         = gin.RoutesInfo
)
