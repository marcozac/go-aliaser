// Code generated by aliaser. DO NOT EDIT.

package uuid

import (
	hash "hash"
	io "io"

	uuid "github.com/google/uuid"
)

const (
	Future    = uuid.Future
	Group     = uuid.Group
	Invalid   = uuid.Invalid
	Microsoft = uuid.Microsoft
	Org       = uuid.Org
	Person    = uuid.Person
	RFC4122   = uuid.RFC4122
	Reserved  = uuid.Reserved
)

var (
	Max           = uuid.Max
	NameSpaceDNS  = uuid.NameSpaceDNS
	NameSpaceOID  = uuid.NameSpaceOID
	NameSpaceURL  = uuid.NameSpaceURL
	NameSpaceX500 = uuid.NameSpaceX500
	Nil           = uuid.Nil
)

func ClockSequence() int {
	return uuid.ClockSequence()
}

func DisableRandPool() {
	uuid.DisableRandPool()
}

func EnableRandPool() {
	uuid.EnableRandPool()
}

func FromBytes(b []byte) (uuid_ uuid.UUID, err error) {
	return uuid.FromBytes(b)
}

func GetTime() (uuid.Time, uint16, error) {
	return uuid.GetTime()
}

func IsInvalidLengthError(err error) bool {
	return uuid.IsInvalidLengthError(err)
}

func Must(uuid_ uuid.UUID, err error) uuid.UUID {
	return uuid.Must(uuid_, err)
}

func MustParse(s string) uuid.UUID {
	return uuid.MustParse(s)
}

func New() uuid.UUID {
	return uuid.New()
}

func NewDCEGroup() (uuid.UUID, error) {
	return uuid.NewDCEGroup()
}

func NewDCEPerson() (uuid.UUID, error) {
	return uuid.NewDCEPerson()
}

func NewDCESecurity(domain uuid.Domain, id uint32) (uuid.UUID, error) {
	return uuid.NewDCESecurity(domain, id)
}

func NewHash(h hash.Hash, space uuid.UUID, data []byte, version int) uuid.UUID {
	return uuid.NewHash(h, space, data, version)
}

func NewMD5(space uuid.UUID, data []byte) uuid.UUID {
	return uuid.NewMD5(space, data)
}

func NewRandom() (uuid.UUID, error) {
	return uuid.NewRandom()
}

func NewRandomFromReader(r io.Reader) (uuid.UUID, error) {
	return uuid.NewRandomFromReader(r)
}

func NewSHA1(space uuid.UUID, data []byte) uuid.UUID {
	return uuid.NewSHA1(space, data)
}

func NewString() string {
	return uuid.NewString()
}

func NewUUID() (uuid.UUID, error) {
	return uuid.NewUUID()
}

func NewV6() (uuid.UUID, error) {
	return uuid.NewV6()
}

func NewV7() (uuid.UUID, error) {
	return uuid.NewV7()
}

func NewV7FromReader(r io.Reader) (uuid.UUID, error) {
	return uuid.NewV7FromReader(r)
}

func NodeID() []byte {
	return uuid.NodeID()
}

func NodeInterface() string {
	return uuid.NodeInterface()
}

func Parse(s string) (uuid.UUID, error) {
	return uuid.Parse(s)
}

func ParseBytes(b []byte) (uuid.UUID, error) {
	return uuid.ParseBytes(b)
}

func SetClockSequence(seq int) {
	uuid.SetClockSequence(seq)
}

func SetNodeID(id []byte) bool {
	return uuid.SetNodeID(id)
}

func SetNodeInterface(name string) bool {
	return uuid.SetNodeInterface(name)
}

func SetRand(r io.Reader) {
	uuid.SetRand(r)
}

func Validate(s string) error {
	return uuid.Validate(s)
}

type (
	Domain   = uuid.Domain
	NullUUID = uuid.NullUUID
	Time     = uuid.Time
	UUID     = uuid.UUID
	UUIDs    = uuid.UUIDs
	Variant  = uuid.Variant
	Version  = uuid.Version
)
